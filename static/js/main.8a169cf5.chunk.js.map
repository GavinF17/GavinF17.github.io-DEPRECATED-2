{"version":3,"sources":["components/ThemeToggle.js","components/Navigation.js","layouts/GeneralLayout.js","layouts/ContentLayout.js","layouts/Layout.js","routes/index.js","App.js","routes/Routes.js","serviceWorker.js","index.js"],"names":["themeOption","themeIcon","Brightness7","Brightness5","Brightness6","ThemeToggle","useState","localStorage","getItem","theme","setTheme","useEffect","setItem","document","documentElement","setAttribute","window","matchMedia","matches","onClick","Navigation","open","setOpen","Navbar","expand","className","NavbarToggler","Collapse","isOpen","navbar","Nav","NavItem","NavLink","tag","Link","to","NavbarText","GeneralLayout","children","ContentLayout","Container","Layout","routes","useLocation","pathname","match","map","route","key","path","exact","component","flattenedRoutes","flatten","flatRoutes","forEach","item","push","React","lazy","App","fallback","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a169cf5.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Brightness5, Brightness6, Brightness7} from '@material-ui/icons';\n\nconst themeOption = {\n  \"DARK\": \"dark\",\n  \"LIGHT\": \"light\",\n  \"SYSTEM\": \"system\",\n};\n\nconst themeIcon = {\n  [themeOption.DARK]: <Brightness7/>,\n  [themeOption.LIGHT]: <Brightness5/>,\n  [null]: <Brightness6/>,\n};\n\nexport const ThemeToggle = () => {\n  const [theme, setTheme] = useState(localStorage.getItem(\"theme\"));\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n\n    if (theme !== null && theme !== \"null\") {\n      document.documentElement.setAttribute(\"data-theme\", theme);\n    } else {\n      document.documentElement.setAttribute(\"data-theme\",\n        window.matchMedia('(prefers-color-scheme: light)').matches\n          ? themeOption.LIGHT\n          : themeOption.DARK\n      )\n    }\n  }, [theme])\n\n  const toggleTheme = () => {\n    switch (theme) {\n      case themeOption.DARK: {\n        setTheme(themeOption.LIGHT);\n        break;\n      }\n      case themeOption.LIGHT: {\n        setTheme(null);\n        break;\n      }\n      default: {\n        setTheme(themeOption.DARK);\n      }\n    }\n  }\n\n  return (\n    <span onClick={toggleTheme}>{themeIcon[theme]}</span>\n  );\n};\n","import React, {useState} from 'react';\nimport Navbar from \"reactstrap/es/Navbar\";\nimport {NavbarToggler} from \"reactstrap\";\nimport Collapse from \"reactstrap/es/Collapse\";\nimport Nav from \"reactstrap/es/Nav\";\nimport NavItem from \"reactstrap/es/NavItem\";\nimport NavLink from \"reactstrap/es/NavLink\";\nimport {Link} from \"react-router-dom\";\nimport {ThemeToggle} from \"./ThemeToggle\";\nimport NavbarText from \"reactstrap/es/NavbarText\";\n\nexport const Navigation = () => {\n  const [open, setOpen] = useState(false);\n\n  const toggleNavbar = () => setOpen(!open);\n\n  return (\n    <Navbar expand=\"md\" className={\"navigation mt-2\" + (open ? \" open\" : \"\")}>\n      <NavbarToggler onClick={toggleNavbar} className={\"hamburger hamburger--collapse\" + (open ? \" is-active\" : \"\")}>\n          <span className=\"hamburger-box\">\n            <span className=\"hamburger-inner\"/>\n          </span>\n      </NavbarToggler>\n\n      <Collapse isOpen={open} navbar>\n        <Nav className={\"m-0\" + (open ? \"\" : \" mr-auto\")} navbar>\n          <NavItem>\n            <NavLink tag={Link} to={\"/\"}>Gavin Fenton</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink tag={Link} to={\"/experience\"}>Experience</NavLink>\n          </NavItem>\n        </Nav>\n        <NavbarText>\n          <ThemeToggle/>\n        </NavbarText>\n      </Collapse>\n    </Navbar>\n  );\n};\n","import React from \"react\";\nimport {Navigation} from \"../components/Navigation\";\n\nconst GeneralLayout = ({children}) => {\n  return (\n    <div className=\"general\">\n      <Navigation/>\n      {children}\n    </div>\n  )\n};\n\nexport default GeneralLayout;\n","import React from \"react\";\nimport {Navigation} from \"../components/Navigation\";\nimport Container from \"reactstrap/es/Container\";\n\nconst ContentLayout = ({children}) => {\n  return (\n    <div className=\"general\">\n      <Navigation/>\n      <Container>\n        {children}\n      </Container>\n    </div>\n  )\n};\n\nexport default ContentLayout;\n","import React from \"react\";\nimport {Route, Switch, useLocation} from \"react-router-dom\";\nimport GeneralLayout from \"./GeneralLayout\";\nimport ContentLayout from \"./ContentLayout\";\n\nexport const Layout = ({routes}) => {\n  const location = useLocation();\n\n  const Layout = (() => {\n    if (location.pathname.match(\"^/experience\")) {\n      return ContentLayout;\n    } else {\n      return GeneralLayout;\n    }\n  })();\n\n  return (\n    <Layout>\n      <Switch>\n        {routes.map(route => (\n          !route.children && (\n            <Route\n              key={route.path}\n              path={route.path}\n              exact={route.exact}\n              component={route.component}\n            />\n          )\n        ))}\n      </Switch>\n    </Layout>\n  )\n};\n","import React from \"react\";\n\nconst HomePage = React.lazy(() => import(\"../pages/Homepage\"))\nconst Experience = React.lazy(() => import(\"../pages/Experience\"))\n\nconst routes = {\n  children: [\n    {\n      path: \"/\",\n      exact: true,\n      component: HomePage\n    },\n    {\n      path: \"/experience\",\n      exact: true,\n      component: Experience\n    }\n  ]\n}\n\nconst flatten = routes => {\n  let flatRoutes = [];\n\n  routes = routes || [];\n  routes.forEach(item => {\n    flatRoutes.push(item);\n\n    if (typeof item.children !== \"undefined\") {\n      flatRoutes = [...flatRoutes, ...flatten(item.children)];\n    }\n  })\n\n  return flatRoutes;\n}\n\nconst flattenedRoutes = flatten([routes]);\n\nexport {routes, flattenedRoutes};\n","import Routes from \"./routes/Routes\";\n\n// document.documentElement.setAttribute(\"data-theme\", \"light\");\n\nconst App = Routes;\n\nexport default App;\n","import React, {Suspense} from \"react\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Layout} from \"../layouts/Layout\";\nimport {flattenedRoutes} from \"./index\";\n\nconst Routes = () => {\n  return (\n    <BrowserRouter>\n      <Suspense fallback={<div/>}>\n        <Layout routes={flattenedRoutes}/>\n      </Suspense>\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./resources/scss/GavinF17.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}